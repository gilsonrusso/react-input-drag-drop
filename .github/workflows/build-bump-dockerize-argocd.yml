name: Build, Test, Bump Version, Dockerize and Publish, Update ArgoCD Helm

on:
  pull_request:
    types:
      - closed
    branches: ["main", "stage"]

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: npm install

      # - name: Run tests
      #   run: npm test

      - name: Build application
        run: npm run build

  bump_version:
    needs: build_and_test
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write # NecessÃ¡rio para commitar e criar tag

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current version from package.json
        id: get_current_version
        run: |
          current_version=$(jq -r '.version' package.json)
          echo "CURRENT_VERSION=$current_version" >> $GITHUB_ENV

      - name: Verify type of bump
        id: check_label
        run: |
          echo "Base ref: ${{ github.base_ref }}"
          echo "Head ref: ${{ github.head_ref }}"

          if [ -z "${{ github.event.pull_request.labels }}" ]; then
            echo "Error: No labels found on the pull request. A label indicating the version bump type (major, minor, patch, or pre-release) is required."
            exit 1
          fi

          if echo "${{ toJson(github.event.pull_request.labels) }}" | grep -q "major"; then
            bump="major"
          elif echo "${{ toJson(github.event.pull_request.labels) }}" | grep -q "minor"; then
            bump="minor"
          elif echo "${{ toJson(github.event.pull_request.labels) }}" | grep -q "patch"; then
            bump="patch"
          elif echo "${{ toJson(github.event.pull_request.labels) }}" | grep -q "pre-release"; then
            bump="pre"
          fi
          echo "BUMP_TYPE=$bump" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm install

      - name: Increment Version
        id: bump_version
        run: |
          NEW_VERSION=$(node -e "
            const semver = require('semver');
            const currentVersion = '${{ env.CURRENT_VERSION }}';
            let bumpType = '${{ env.BUMP_TYPE }}';
            if (bumpType === 'pre') {
              bumpType = 'prerelease';
            }
            const newVersion = semver.inc(currentVersion, bumpType);
            process.stdout.write(newVersion);
          ")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo -n "$NEW_VERSION" > version.txt
          cat -A version.txt

      - name: Upload version artifact
        uses: actions/upload-artifact@v4
        with:
          name: version_tag_artifact
          path: ./version.txt

      - name: Debug - Print head_ref
        run: |
          echo "ref: ${{ github.ref }}"
          echo "ref_name: ${{ github.ref_name }}"
          echo "head_ref: ${{ github.head_ref }}"

      - name: Update package.json with new version
        run: |
          sed -i "s/\"version\": \"${{ env.CURRENT_VERSION }}\"/\"version\": \"${{ env.NEW_VERSION }}\"/" package.json
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add package.json
          git commit -m "Bump version to ${{ env.NEW_VERSION }}"
          git push origin ${{  github.ref_name  }}

      - name: Create Git Tag
        id: create_tag
        run: |
          git tag -a "v${{ env.NEW_VERSION }}" -m "Version ${{ env.NEW_VERSION }}"
          git push origin --tags

  dockerize_and_publish:
    needs: bump_version
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download version artifact
        uses: actions/download-artifact@v4
        with:
          name: version_tag_artifact
          path: .
      - shell: bash
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: List files
        run: ls -la

      - name: Extract metadata (version from package.json)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPO_NAME }}
          tags: |
            latest
            v${{ env.VERSION }}

      - name: Set Dockerfile dynamically
        id: set_dockerfile
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "DOCKERFILE=Dockerfile.prod" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "stage" ]]; then
            echo "DOCKERFILE=Dockerfile.stage" >> $GITHUB_ENV
          else
            echo "DOCKERFILE=Dockerfile.dev" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  update_argocd_helm:
    needs: dockerize_and_publish
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download version artifact
        uses: actions/download-artifact@v4
        with:
          name: version_tag_artifact
          path: .
      - shell: bash
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Checkout ArgoCD Manifest Repository (main branch)
        uses: actions/checkout@v4
        with:
          repository: gilsonrusso/argocd-trainning
          token: ${{ secrets.GH_TOKEN_VERSION_REPO }}
          path: argocd-trainning
          ref: main

      - name: Install yq
        run: sudo apt-get update && sudo apt-get install -y yq

      - name: Update values.prod.yaml (on merge to main)
        if: github.event.pull_request.base.ref == 'main'
        run: |
          cd argocd-trainning
          IMAGE_TAG="v${VERSION}"
          yq -y ".app.image.tag = \"$IMAGE_TAG\"" values.prod.yaml -i
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add values.prod.yaml
          git commit -m "Update production image tag to v${VERSION}"
          git push origin main

      - name: Update values.stage.yaml (on merge to stage)
        if: github.event.pull_request.base.ref == 'stage'
        run: |
          cd argocd-trainning
          IMAGE_TAG="v${VERSION}"
          yq -y ".app.image.tag = \"$IMAGE_TAG\"" values.stage.yaml -i
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add values.stage.yaml
          git commit -m "Update staging image tag to v${VERSION}"
          git push origin main
