name: Bump Version and Dockerize
# This workflow bumps the version of the application based on the labels of the merged pull request.
# It runs on the main and stage branches.
# The workflow is triggered on pull request closed events.
# It checks if the pull request was merged and then increments the version in package.json.
# It also creates a Git tag for the new version and pushes it to the repository.
# The workflow also builds and pushes a Docker image to Docker Hub.
# The Docker image is tagged with the new version and the latest tag.
# The workflow uses the Docker Buildx and Docker Login actions to build and push the image.
# The workflow uses the Docker Metadata action to extract metadata from the package.json file.

on:
  pull_request:
    types:
      - closed
    branches: ["main", "stage"]

jobs:
  bump_version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write # NecessÃ¡rio para commitar e criar tag

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current version from package.json
        id: get_current_version
        run: |
          current_version=$(jq -r '.version' package.json)
          echo "CURRENT_VERSION=$current_version" >> $GITHUB_ENV

      - name: Verify type of bump
        id: check_label
        run: |
          bump="patch"
          if [[ $(echo "${{ toJson(github.event.pull_request.labels) }}" | grep "major") ]]; then
            bump="major"
          elif [[ $(echo "${{ toJson(github.event.pull_request.labels) }}" | grep "minor") ]]; then
            bump="minor"
          elif [[ $(echo "${{ toJson(github.event.pull_request.labels) }}" | grep "pre-release") ]]; then
            bump="pre"
          fi
          echo "BUMP_TYPE=$bump" >> $GITHUB_ENV

      - name: Increment Version
        id: bump_version
        run: |
          NEW_VERSION=$(node -e "
            const semver = require('semver');
            const currentVersion = '${{ env.CURRENT_VERSION }}';
            let bumpType = '${{ env.BUMP_TYPE }}';
            if (bumpType === 'pre') {
              bumpType = 'prerelease';
            }
            const newVersion = semver.inc(currentVersion, bumpType);
            console.log(newVersion);
          ")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update package.json with new version
        run: |
          sed -i "s/\"version\": \"${{ env.CURRENT_VERSION }}\"/\"version\": \"${{ env.NEW_VERSION }}\"/" package.json
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add package.json
          git commit -m "Bump version to ${{ env.NEW_VERSION }}"
          git push origin ${{ github.head_ref }} # Empurra para a branch do PR mergeado

      - name: Create Git Tag
        id: create_tag
        run: |
          git tag -a "v${{ env.NEW_VERSION }}" -m "Version ${{ env.NEW_VERSION }}"
          git push origin --tags

  dockerize:
    needs: bump_version
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version from package.json
        id: package_version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Extract metadata (version from package.json)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/seu-projeto
          tags: |
            latest
            v${{ steps.package_version.outputs.VERSION }}
            ${{ github.sha }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
